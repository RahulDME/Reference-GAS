/**
 * Returns an array with no empty elements.
 *
 * @param {*} x
 * @returns {Array}
 * @customfunction
 */

  function rmDuplicatesFrom(arr) {
  //var arr = [1, 2, 3, 1, 2, 3, 4,];
  var check  = {};
  var result = [];
  var j = 0;
  for(var i = 0; i < arr.length; i++) {
    var item = arr[i];
    if(check[item] !== 1) {   //checks if contains the array element
      check[item] = 1;        //assign 1 to the element
      result[j++] = item;    //add element to the result array
    }
  }
  return result;
}


---------------------------------------------------------------------------------------------------------------------------------------
/**
 * Returns an array with no empty elements.
 *
 * @param {Array} range - The input range of cells.
 * @returns {Array} - An array with no empty elements.
 * @customfunction
 */
function rmEmptyEl(range) {
  var values = range.flat(); // Flattens the 2D array into 1D array
  
  return values.filter(function(item) {
    return item !== undefined && item !== '';
  });
}


---------------------------------------------------------------------------------------------------------------------------------------
/**
 * Returns an array of objects. Objects have two properties, count and value.
 * @param {Array} arr
 * @property {value} a value found in the array
 * @property {count} count of the value in the array
 * @returns {Object[]}
 * @customfunction
 */


function countOfValIn2(arr1) {
  let flatArr = [].concat(...arr1);
  
  let map = new Map();
  
  // Count the frequency of each non-empty value
  for (let value of flatArr) {
    if (value !== "") {
      if (map.has(value)) {
        map.set(value, map.get(value) + 1);
      } else {
        map.set(value, 1);
      }
    }
  }
  
  let result = Array.from(map, ([value, count]) => [value, count]);
  
  return result;
}

---------------------------------------------------------------------------------------------------------------------------------------

/**
 * Returns an array of the common elements in both arrays.
 * @param {Array} arrA
 * @param {Array} arrB
 * @returns {Array}
 * @customfunction
 */

function Intercross(arrA, arrB) {
  var a = 0;
  var b = 0;
  var result = [];

  // Custom sort function that works for both numbers and strings
  function customSort(x, y) {
    if (typeof x === 'number' && typeof y === 'number') {
      return x - y;
    } else {
      return x.toString().localeCompare(y.toString());
    }
  }

  // Sorting arrays with the custom sort function
  arrA.sort(customSort);
  arrB.sort(customSort);

  // Finding common elements
  while (a < arrA.length && b < arrB.length) {
    if (arrA[a].toString() < arrB[b].toString()) {
      a++;
    } else if (arrA[a].toString() > arrB[b].toString()) {
      b++;
    } else {
      result.push(arrA[a]);
      a++;
      b++;
    }
  }
  return result;
}
