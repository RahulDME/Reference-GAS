/**
 * Returns an array with unique elements.
 *
 * @param {*} x
 * @returns {Array}
 * @customfunction
 */

  function rmDuplicatesFrom2(arr) {
  //var arr = [1, 2, 3, 1, 2, 3, 4,];
  var check  = {};
  var result = [];
  var j = 0;
  for(var i = 0; i < arr.length; i++) {
    var item = arr[i];
    if(check[item] !== 1) {   //checks if contains the array element
      check[item] = 1;        //assign 1 to the element
      result[j++] = item;    //add element to the result array
    }
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////////////

/**
 * Returns an array with no empty elements.
 *
 * @param {Array} range - The input range of cells.
 * @returns {Array} - An array with no empty elements.
 * @customfunction
 */
function rmEmptyEl(range) {
  var values = range.flat(); // Flattens the 2D array into 1D array
  
  return values.filter(function(item) {
    return item !== undefined && item !== '';
  });
}

////////////////////////////////////////////////////////////////////////////////////////

/**
 * Returns an array of objects. Objects have two properties, count and value.
 * @param {Array} arr
 * @property {value} a value found in the array
 * @property {count} count of the value in the array
 * @returns {Object[]}
 * @customfunction
 */


function countOfValIn2(arr1) {
  let flatArr = [].concat(...arr1);
  
  let map = new Map();
  
  // Count the frequency of each non-empty value
  for (let value of flatArr) {
    if (value !== "") {
      if (map.has(value)) {
        map.set(value, map.get(value) + 1);
      } else {
        map.set(value, 1);
      }
    }
  }
  
  let result = Array.from(map, ([value, count]) => [value, count]);
  
  return result;
}


////////////////////////////////////////////////////////////////////////////////////////

/**
 * Returns an array of the common elements in both arrays.
 * @param {Array} arrA
 * @param {Array} arrB
 * @returns {Array}
 * @customfunction
 */


function Intercross(arrA, arrB) {
  var a = 0;
  var b = 0;
  var result = [];

  // Custom sort function that works for both numbers and strings
  function customSort(x, y) {
    if (typeof x === 'number' && typeof y === 'number') {
      return x - y;
    } else {
      return x.toString().localeCompare(y.toString());
    }
  }

  // Sorting arrays with the custom sort function
  arrA.sort(customSort);
  arrB.sort(customSort);

  // Finding common elements
  while (a < arrA.length && b < arrB.length) {
    if (arrA[a].toString() < arrB[b].toString()) {
      a++;
    } else if (arrA[a].toString() > arrB[b].toString()) {
      b++;
    } else {
      result.push(arrA[a]);
      a++;
      b++;
    }
  }
  return result;
}


////////////////////////////////////////////////////////////////////////////////////////
/**
 * Returns a string of array values. 
 * Elements are separated by a delimiter and a space.
 *
 * @param {Array} arr
 * @param {string} delim
 * @returns {string}
 * @customfunction
 */

function delimStrFromArr2(arr, delim) {
  var _arr = rmDuplicatesFrom(arr).sort();
  var result  = "";
  for (var i = 0; i < _arr.length; i++) {
    result += _arr[i] + delim + " ";
  }
  result = result.slice(0, -2);
  return result;
}


////////////////////////////////////////////////////////////////////////////////////////
/**
 * Removes duplicates from an array.
 *
 * @param {Array} arr
 * @returns {Array}
 */
function rmDuplicatesFromDelimit(arr) {
  return arr.filter(function (item, index, self) {
    return self.indexOf(item) === index;
  });
}

/**
 * Returns a string of array values.
 * Elements are separated by a delimiter and a space, each followed by a modification.
 *
 * @param {Array} arr
 * @param {string} delim
 * @param {string} mod Modification to append to each item in the array.
 * @returns {string}
 * @customfunction
 */
function delimStrFromArrMod2(arr, delim, mod) {
  var _arr = rmDuplicatesFromDelimit(arr).sort();
  var result = "";
  for (var i = 0; i < _arr.length; i++) {
    result += _arr[i] + mod + delim + " ";
  }
  result = result.slice(0, -2);
  return result;
  //array-rahul,delimiter-",",mod-@arihant.com

}

////////////////////////////////////////////////////////////////////////////////////////

/**
 * Returns an array containing all values in a two-dimensional array.
 *
 * @param {Array[]} twoDArr
 * @returns {Array}
 * @customfunction
 */

function flattenTwoDArr2(twoDArr) {
  //var arry =["a", "b", "c", "a", "b", "c", "a"];
  var result = twoDArr.reduce(function(a, b) {
    return a.concat(b);
  });
  return result;
}


////////////////////////////////////////////////////////////////////////////////////////
/**
 * Sorts a range based on the specified column index in ascending or descending order.
 *
 * @param {range} data The entire data range (as a 2D array).
 * @param {number} columnIndex The index of the column to sort by (1-based index).
 * @param {boolean} descending True for descending order, false for ascending order.
 * @return The sorted 2D array.
 * @customfunction
 */
function sortRangeBySinColumn(data, columnIndex, descending) {
  // Adjust columnIndex to 0-based for JavaScript array handling
  columnIndex -= 1;

  // Sort the data array
  data.sort(function(a, b) {
    var valueA = a[columnIndex];
    var valueB = b[columnIndex];

    if (valueA < valueB) {
      return descending ? 1 : -1;
    } else if (valueA > valueB) {
      return descending ? -1 : 1;
    } else {
      return 0;
    }
  });

  return data;
}

////////////////////////////////////////////////////////////////////////////////////////

/**
 * Sorts a range based on the specified column indexes in ascending or descending order.
 *
 * @param {range} data The entire data range (as a 2D array).
 * @param {number} columnIndex1 The index of the first column to sort by (1-based index).
 * @param {number} columnIndex2 The index of the second column to sort by (1-based index).
 * @param {boolean} descending True for descending order, false for ascending order.
 * @return The sorted 2D array.
 * @customfunction
 */
function sortRangeByMulColumns(data, columnIndex1, columnIndex2, descending) {
  // Adjust column indexes to 0-based for JavaScript array handling
  columnIndex1 -= 1;
  columnIndex2 -= 1;

  // Sort the data array
  data.sort(function(a, b) {
    var valueA1 = a[columnIndex1];
    var valueB1 = b[columnIndex1];
    var valueA2 = a[columnIndex2];
    var valueB2 = b[columnIndex2];

    // First sort by columnIndex1
    if (valueA1 < valueB1) {
      return descending ? 1 : -1;
    } else if (valueA1 > valueB1) {
      return descending ? -1 : 1;
    } else {
      // If values are equal in columnIndex1, sort by columnIndex2
      if (valueA2 < valueB2) {
        return descending ? 1 : -1;
      } else if (valueA2 > valueB2) {
        return descending ? -1 : 1;
      } else {
        return 0;
      }
    }
  });

  return data;
}




////////////////////////////////////////////////////////////////////////////////////////
/**
 * Unifies names in a Google Sheet based on the provided column indices.
 * This script is dynamic and can accommodate additional name columns in the future.
 *
 * @param {string[][]} rangeData - 2D array containing the data range.
 * @param {number[]} nameCols - Array of column indices (1-indexed) where the name parts are located.
 * @param {string} newColName - The header for the new column with the unified names.
 * @return {string[][]} - The data range with an additional column for the unified names.
 * @customfunction
 */
function unifyNames(rangeData, nameCols, newColName) {
  // Check if the first row contains headers and add the new column name
  var headers = rangeData[0];
  var hasHeader = headers.length >= Math.max.apply(null, nameCols);
  if (hasHeader) {
    headers.push(newColName);
  }

  // Process each row to unify the names
  var result = rangeData.map(function(row, index) {
    if (index === 0 && hasHeader) {
      // Return the headers row with the new column name
      return row;
    } else {
      // Unify the names from specified columns
      var unifiedName = nameCols.map(function(colIndex) {
        return row[colIndex - 1]; // Adjust for zero-based indexing
      }).join(' ').trim();
      // Add the unified name to the row
      row.push(unifiedName);
      return row;
    }
  });

  return result;
}


////////////////////////////////////////////////////////////////////////////////////////
/**
 * This is not working
 * Combines data based on unique values in columns B and C
 * @param {string[][]} rangeData - 2D array containing the data range.
 * @return {string[][]} - Combined data based on unique values in columns B and C.
 * @customfunction
 */
function combineobj(rangeData) {
  try {
    var unique = [];
    unique.push(rangeData[0]);
    var append = true;
    for (var i = 1; i < rangeData.length; i++) {
      append = true;
      for (var j = 0; j < unique.length; j++) {
        if (
          rangeData[i][1] === unique[j][1] &&
          rangeData[i][2] === unique[j][2]
        ) {
          unique[j][0] = unique[j][0] + ", " + rangeData[i][0];
          append = false;
          break;
        }
      }
      if (append) unique.push(rangeData[i]);
    }
    return unique;
  } catch (err) {
    console.error(err);
    return "Error occurred: " + err.message;
  }
}
